// @generated by protobuf-ts 2.2.2
// @generated from protobuf file "errors/v1/errors.proto" (package "errors.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message errors.v1.BasicError
 */
export interface BasicError {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: errors.v1.BasicError.BasicErrorCode code = 2;
     */
    code: BasicError_BasicErrorCode;
}
/**
 * @generated from protobuf enum errors.v1.BasicError.BasicErrorCode
 */
export enum BasicError_BasicErrorCode {
    /**
     * @generated from protobuf enum value: BASIC_ERROR_CODE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: BASIC_ERROR_CODE_BAD_REQUEST = 1;
     */
    BAD_REQUEST = 1,
    /**
     * @generated from protobuf enum value: BASIC_ERROR_CODE_UNAUTHENTICATED = 2;
     */
    UNAUTHENTICATED = 2,
    /**
     * @generated from protobuf enum value: BASIC_ERROR_CODE_NOT_FOUND = 3;
     */
    NOT_FOUND = 3,
    /**
     * @generated from protobuf enum value: BASIC_ERROR_CODE_INTERNAL = 4;
     */
    INTERNAL = 4,
    /**
     * @generated from protobuf enum value: BASIC_ERROR_CODE_UNKNOWN = 5;
     */
    UNKNOWN = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class BasicError$Type extends MessageType<BasicError> {
    constructor() {
        super("errors.v1.BasicError", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "code", kind: "enum", T: () => ["errors.v1.BasicError.BasicErrorCode", BasicError_BasicErrorCode, "BASIC_ERROR_CODE_"] }
        ]);
    }
    create(value?: PartialMessage<BasicError>): BasicError {
        const message = { message: "", code: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BasicError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BasicError): BasicError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                case /* errors.v1.BasicError.BasicErrorCode code */ 2:
                    message.code = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BasicError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        /* errors.v1.BasicError.BasicErrorCode code = 2; */
        if (message.code !== 0)
            writer.tag(2, WireType.Varint).int32(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message errors.v1.BasicError
 */
export const BasicError = new BasicError$Type();
