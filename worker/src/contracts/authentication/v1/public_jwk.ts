// @generated by protobuf-ts 2.3.0
// @generated from protobuf file "authentication/v1/public_jwk.proto" (package "authentication.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MESSAGE_TYPE } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
import { BasicError } from '../../errors/v1/errors';
/**
 * @generated from protobuf message authentication.v1.PublicJwk
 */
export interface PublicJwk {
  /**
   * @generated from protobuf field: string kid = 3;
   */
  kid: string;
  /**
   * @generated from protobuf field: string jwk = 4;
   */
  jwk: string;
}
/**
 * @generated from protobuf message authentication.v1.PublicJwks
 */
export interface PublicJwks {
  /**
   * @generated from protobuf field: repeated authentication.v1.PublicJwk jwks = 1;
   */
  jwks: PublicJwk[];
}
/**
 * @generated from protobuf message authentication.v1.GetPublicJwksResponse
 */
export interface GetPublicJwksResponse {
  /**
   * @generated from protobuf oneof: response
   */
  response:
    | {
        oneofKind: 'ok';
        /**
         * @generated from protobuf field: authentication.v1.PublicJwks ok = 1;
         */
        ok: PublicJwks;
      }
    | {
        oneofKind: 'error';
        /**
         * @generated from protobuf field: errors.v1.BasicError error = 2;
         */
        error: BasicError;
      }
    | {
        oneofKind: undefined;
      };
}
// @generated message type with reflection information, may provide speed optimized methods
class PublicJwk$Type extends MessageType<PublicJwk> {
  constructor() {
    super('authentication.v1.PublicJwk', [
      { no: 3, name: 'kid', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: 'jwk', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<PublicJwk>): PublicJwk {
    const message = { kid: '', jwk: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<PublicJwk>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PublicJwk,
  ): PublicJwk {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string kid */ 3:
          message.kid = reader.string();
          break;
        case /* string jwk */ 4:
          message.jwk = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PublicJwk,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string kid = 3; */
    if (message.kid !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.kid);
    /* string jwk = 4; */
    if (message.jwk !== '')
      writer.tag(4, WireType.LengthDelimited).string(message.jwk);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.PublicJwk
 */
export const PublicJwk = new PublicJwk$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublicJwks$Type extends MessageType<PublicJwks> {
  constructor() {
    super('authentication.v1.PublicJwks', [
      {
        no: 1,
        name: 'jwks',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => PublicJwk,
      },
    ]);
  }
  create(value?: PartialMessage<PublicJwks>): PublicJwks {
    const message = { jwks: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<PublicJwks>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PublicJwks,
  ): PublicJwks {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated authentication.v1.PublicJwk jwks */ 1:
          message.jwks.push(
            PublicJwk.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PublicJwks,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated authentication.v1.PublicJwk jwks = 1; */
    for (let i = 0; i < message.jwks.length; i++)
      PublicJwk.internalBinaryWrite(
        message.jwks[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.PublicJwks
 */
export const PublicJwks = new PublicJwks$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPublicJwksResponse$Type extends MessageType<GetPublicJwksResponse> {
  constructor() {
    super('authentication.v1.GetPublicJwksResponse', [
      {
        no: 1,
        name: 'ok',
        kind: 'message',
        oneof: 'response',
        T: () => PublicJwks,
      },
      {
        no: 2,
        name: 'error',
        kind: 'message',
        oneof: 'response',
        T: () => BasicError,
      },
    ]);
  }
  create(value?: PartialMessage<GetPublicJwksResponse>): GetPublicJwksResponse {
    const message = { response: { oneofKind: undefined } };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetPublicJwksResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetPublicJwksResponse,
  ): GetPublicJwksResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* authentication.v1.PublicJwks ok */ 1:
          message.response = {
            oneofKind: 'ok',
            ok: PublicJwks.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.response as any).ok,
            ),
          };
          break;
        case /* errors.v1.BasicError error */ 2:
          message.response = {
            oneofKind: 'error',
            error: BasicError.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.response as any).error,
            ),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetPublicJwksResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* authentication.v1.PublicJwks ok = 1; */
    if (message.response.oneofKind === 'ok')
      PublicJwks.internalBinaryWrite(
        message.response.ok,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* errors.v1.BasicError error = 2; */
    if (message.response.oneofKind === 'error')
      BasicError.internalBinaryWrite(
        message.response.error,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.GetPublicJwksResponse
 */
export const GetPublicJwksResponse = new GetPublicJwksResponse$Type();
