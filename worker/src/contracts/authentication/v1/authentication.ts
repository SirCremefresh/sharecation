// @generated by protobuf-ts 2.3.0
// @generated from protobuf file "authentication/v1/authentication.proto" (package "authentication.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MESSAGE_TYPE } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
import { BasicError } from '../../errors/v1/errors';
/**
 * @generated from protobuf message authentication.v1.AuthenticatedData
 */
export interface AuthenticatedData {
  /**
   * @generated from protobuf field: string sub = 1;
   */
  sub: string;
  /**
   * @generated from protobuf field: int32 exp = 2;
   */
  exp: number;
}
/**
 * @generated from protobuf message authentication.v1.Authenticated
 */
export interface Authenticated {
  /**
   * @generated from protobuf field: string jwt_string = 1;
   */
  jwtString: string;
  /**
   * @generated from protobuf field: authentication.v1.AuthenticatedData data = 2;
   */
  data?: AuthenticatedData;
}
/**
 * @generated from protobuf message authentication.v1.CreateAuthenticationWithFirebaseRequest
 */
export interface CreateAuthenticationWithFirebaseRequest {
  /**
   * @generated from protobuf field: string firebase_jwt_string = 1;
   */
  firebaseJwtString: string;
}
/**
 * @generated from protobuf message authentication.v1.CreateAuthenticationWithFirebaseResponse
 */
export interface CreateAuthenticationWithFirebaseResponse {
  /**
   * @generated from protobuf oneof: response
   */
  response:
    | {
        oneofKind: 'ok';
        /**
         * @generated from protobuf field: authentication.v1.Authenticated ok = 1;
         */
        ok: Authenticated;
      }
    | {
        oneofKind: 'error';
        /**
         * @generated from protobuf field: errors.v1.BasicError error = 2;
         */
        error: BasicError;
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * @generated from protobuf message authentication.v1.GetRightOfUserRequest
 */
export interface GetRightOfUserRequest {
  /**
   * @generated from protobuf field: string user_id = 1;
   */
  userId: string;
  /**
   * @generated from protobuf field: string right = 2;
   */
  right: string;
}
/**
 * @generated from protobuf message authentication.v1.Right
 */
export interface Right {
  /**
   * @generated from protobuf field: string user_id = 1;
   */
  userId: string;
  /**
   * @generated from protobuf field: string right = 2;
   */
  right: string;
}
/**
 * @generated from protobuf message authentication.v1.Rights
 */
export interface Rights {
  /**
   * @generated from protobuf field: repeated string rights = 1;
   */
  rights: string[];
}
/**
 * @generated from protobuf message authentication.v1.GetRightOfUserResponse
 */
export interface GetRightOfUserResponse {
  /**
   * @generated from protobuf oneof: response
   */
  response:
    | {
        oneofKind: 'ok';
        /**
         * @generated from protobuf field: authentication.v1.GetRightOfUserResponse.HasRight ok = 1;
         */
        ok: GetRightOfUserResponse_HasRight;
      }
    | {
        oneofKind: 'error';
        /**
         * @generated from protobuf field: errors.v1.BasicError error = 2;
         */
        error: BasicError;
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * @generated from protobuf message authentication.v1.GetRightOfUserResponse.HasRight
 */
export interface GetRightOfUserResponse_HasRight {
  /**
   * @generated from protobuf field: string right = 1;
   */
  right: string;
  /**
   * @generated from protobuf field: string user_id = 2;
   */
  userId: string;
  /**
   * @generated from protobuf field: bool has_right = 3;
   */
  hasRight: boolean;
}
/**
 * @generated from protobuf message authentication.v1.CreateRightOfUserRequest
 */
export interface CreateRightOfUserRequest {
  /**
   * @generated from protobuf field: string user_id = 1;
   */
  userId: string;
  /**
   * @generated from protobuf field: string right = 2;
   */
  right: string;
}
/**
 * @generated from protobuf message authentication.v1.CreateRightOfUserResponse
 */
export interface CreateRightOfUserResponse {
  /**
   * @generated from protobuf oneof: response
   */
  response:
    | {
        oneofKind: 'ok';
        /**
         * @generated from protobuf field: authentication.v1.Right ok = 1;
         */
        ok: Right;
      }
    | {
        oneofKind: 'error';
        /**
         * @generated from protobuf field: errors.v1.BasicError error = 2;
         */
        error: BasicError;
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * @generated from protobuf message authentication.v1.DeleteRightOfUserRequest
 */
export interface DeleteRightOfUserRequest {
  /**
   * @generated from protobuf field: string user_id = 1;
   */
  userId: string;
  /**
   * @generated from protobuf field: string right = 2;
   */
  right: string;
}
/**
 * @generated from protobuf message authentication.v1.DeleteRightOfUserResponse
 */
export interface DeleteRightOfUserResponse {
  /**
   * @generated from protobuf oneof: response
   */
  response:
    | {
        oneofKind: 'ok';
        /**
         * @generated from protobuf field: authentication.v1.Right ok = 1;
         */
        ok: Right;
      }
    | {
        oneofKind: 'error';
        /**
         * @generated from protobuf field: errors.v1.BasicError error = 2;
         */
        error: BasicError;
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * @generated from protobuf message authentication.v1.GetRightsOfUserRequest
 */
export interface GetRightsOfUserRequest {
  /**
   * @generated from protobuf field: string user_id = 1;
   */
  userId: string;
}
/**
 * @generated from protobuf message authentication.v1.GetRightsOfUserResponse
 */
export interface GetRightsOfUserResponse {
  /**
   * @generated from protobuf oneof: response
   */
  response:
    | {
        oneofKind: 'ok';
        /**
         * @generated from protobuf field: authentication.v1.Rights ok = 1;
         */
        ok: Rights;
      }
    | {
        oneofKind: 'error';
        /**
         * @generated from protobuf field: errors.v1.BasicError error = 2;
         */
        error: BasicError;
      }
    | {
        oneofKind: undefined;
      };
}
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticatedData$Type extends MessageType<AuthenticatedData> {
  constructor() {
    super('authentication.v1.AuthenticatedData', [
      { no: 1, name: 'sub', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'exp', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
    ]);
  }
  create(value?: PartialMessage<AuthenticatedData>): AuthenticatedData {
    const message = { sub: '', exp: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<AuthenticatedData>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: AuthenticatedData,
  ): AuthenticatedData {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string sub */ 1:
          message.sub = reader.string();
          break;
        case /* int32 exp */ 2:
          message.exp = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: AuthenticatedData,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string sub = 1; */
    if (message.sub !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.sub);
    /* int32 exp = 2; */
    if (message.exp !== 0) writer.tag(2, WireType.Varint).int32(message.exp);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.AuthenticatedData
 */
export const AuthenticatedData = new AuthenticatedData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Authenticated$Type extends MessageType<Authenticated> {
  constructor() {
    super('authentication.v1.Authenticated', [
      { no: 1, name: 'jwt_string', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'data', kind: 'message', T: () => AuthenticatedData },
    ]);
  }
  create(value?: PartialMessage<Authenticated>): Authenticated {
    const message = { jwtString: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<Authenticated>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Authenticated,
  ): Authenticated {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string jwt_string */ 1:
          message.jwtString = reader.string();
          break;
        case /* authentication.v1.AuthenticatedData data */ 2:
          message.data = AuthenticatedData.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.data,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: Authenticated,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string jwt_string = 1; */
    if (message.jwtString !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.jwtString);
    /* authentication.v1.AuthenticatedData data = 2; */
    if (message.data)
      AuthenticatedData.internalBinaryWrite(
        message.data,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.Authenticated
 */
export const Authenticated = new Authenticated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAuthenticationWithFirebaseRequest$Type extends MessageType<CreateAuthenticationWithFirebaseRequest> {
  constructor() {
    super('authentication.v1.CreateAuthenticationWithFirebaseRequest', [
      {
        no: 1,
        name: 'firebase_jwt_string',
        kind: 'scalar',
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<CreateAuthenticationWithFirebaseRequest>,
  ): CreateAuthenticationWithFirebaseRequest {
    const message = { firebaseJwtString: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<CreateAuthenticationWithFirebaseRequest>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateAuthenticationWithFirebaseRequest,
  ): CreateAuthenticationWithFirebaseRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string firebase_jwt_string */ 1:
          message.firebaseJwtString = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateAuthenticationWithFirebaseRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string firebase_jwt_string = 1; */
    if (message.firebaseJwtString !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.firebaseJwtString);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.CreateAuthenticationWithFirebaseRequest
 */
export const CreateAuthenticationWithFirebaseRequest =
  new CreateAuthenticationWithFirebaseRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAuthenticationWithFirebaseResponse$Type extends MessageType<CreateAuthenticationWithFirebaseResponse> {
  constructor() {
    super('authentication.v1.CreateAuthenticationWithFirebaseResponse', [
      {
        no: 1,
        name: 'ok',
        kind: 'message',
        oneof: 'response',
        T: () => Authenticated,
      },
      {
        no: 2,
        name: 'error',
        kind: 'message',
        oneof: 'response',
        T: () => BasicError,
      },
    ]);
  }
  create(
    value?: PartialMessage<CreateAuthenticationWithFirebaseResponse>,
  ): CreateAuthenticationWithFirebaseResponse {
    const message = { response: { oneofKind: undefined } };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<CreateAuthenticationWithFirebaseResponse>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateAuthenticationWithFirebaseResponse,
  ): CreateAuthenticationWithFirebaseResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* authentication.v1.Authenticated ok */ 1:
          message.response = {
            oneofKind: 'ok',
            ok: Authenticated.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.response as any).ok,
            ),
          };
          break;
        case /* errors.v1.BasicError error */ 2:
          message.response = {
            oneofKind: 'error',
            error: BasicError.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.response as any).error,
            ),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateAuthenticationWithFirebaseResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* authentication.v1.Authenticated ok = 1; */
    if (message.response.oneofKind === 'ok')
      Authenticated.internalBinaryWrite(
        message.response.ok,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* errors.v1.BasicError error = 2; */
    if (message.response.oneofKind === 'error')
      BasicError.internalBinaryWrite(
        message.response.error,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.CreateAuthenticationWithFirebaseResponse
 */
export const CreateAuthenticationWithFirebaseResponse =
  new CreateAuthenticationWithFirebaseResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRightOfUserRequest$Type extends MessageType<GetRightOfUserRequest> {
  constructor() {
    super('authentication.v1.GetRightOfUserRequest', [
      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'right', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<GetRightOfUserRequest>): GetRightOfUserRequest {
    const message = { userId: '', right: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetRightOfUserRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetRightOfUserRequest,
  ): GetRightOfUserRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string user_id */ 1:
          message.userId = reader.string();
          break;
        case /* string right */ 2:
          message.right = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetRightOfUserRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string user_id = 1; */
    if (message.userId !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.userId);
    /* string right = 2; */
    if (message.right !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.right);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.GetRightOfUserRequest
 */
export const GetRightOfUserRequest = new GetRightOfUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Right$Type extends MessageType<Right> {
  constructor() {
    super('authentication.v1.Right', [
      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'right', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<Right>): Right {
    const message = { userId: '', right: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<Right>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Right,
  ): Right {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string user_id */ 1:
          message.userId = reader.string();
          break;
        case /* string right */ 2:
          message.right = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: Right,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string user_id = 1; */
    if (message.userId !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.userId);
    /* string right = 2; */
    if (message.right !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.right);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.Right
 */
export const Right = new Right$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Rights$Type extends MessageType<Rights> {
  constructor() {
    super('authentication.v1.Rights', [
      {
        no: 1,
        name: 'rights',
        kind: 'scalar',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<Rights>): Rights {
    const message = { rights: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<Rights>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Rights,
  ): Rights {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated string rights */ 1:
          message.rights.push(reader.string());
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: Rights,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated string rights = 1; */
    for (let i = 0; i < message.rights.length; i++)
      writer.tag(1, WireType.LengthDelimited).string(message.rights[i]);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.Rights
 */
export const Rights = new Rights$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRightOfUserResponse$Type extends MessageType<GetRightOfUserResponse> {
  constructor() {
    super('authentication.v1.GetRightOfUserResponse', [
      {
        no: 1,
        name: 'ok',
        kind: 'message',
        oneof: 'response',
        T: () => GetRightOfUserResponse_HasRight,
      },
      {
        no: 2,
        name: 'error',
        kind: 'message',
        oneof: 'response',
        T: () => BasicError,
      },
    ]);
  }
  create(
    value?: PartialMessage<GetRightOfUserResponse>,
  ): GetRightOfUserResponse {
    const message = { response: { oneofKind: undefined } };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetRightOfUserResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetRightOfUserResponse,
  ): GetRightOfUserResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* authentication.v1.GetRightOfUserResponse.HasRight ok */ 1:
          message.response = {
            oneofKind: 'ok',
            ok: GetRightOfUserResponse_HasRight.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.response as any).ok,
            ),
          };
          break;
        case /* errors.v1.BasicError error */ 2:
          message.response = {
            oneofKind: 'error',
            error: BasicError.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.response as any).error,
            ),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetRightOfUserResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* authentication.v1.GetRightOfUserResponse.HasRight ok = 1; */
    if (message.response.oneofKind === 'ok')
      GetRightOfUserResponse_HasRight.internalBinaryWrite(
        message.response.ok,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* errors.v1.BasicError error = 2; */
    if (message.response.oneofKind === 'error')
      BasicError.internalBinaryWrite(
        message.response.error,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.GetRightOfUserResponse
 */
export const GetRightOfUserResponse = new GetRightOfUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRightOfUserResponse_HasRight$Type extends MessageType<GetRightOfUserResponse_HasRight> {
  constructor() {
    super('authentication.v1.GetRightOfUserResponse.HasRight', [
      { no: 1, name: 'right', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'has_right', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
    ]);
  }
  create(
    value?: PartialMessage<GetRightOfUserResponse_HasRight>,
  ): GetRightOfUserResponse_HasRight {
    const message = { right: '', userId: '', hasRight: false };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetRightOfUserResponse_HasRight>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetRightOfUserResponse_HasRight,
  ): GetRightOfUserResponse_HasRight {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string right */ 1:
          message.right = reader.string();
          break;
        case /* string user_id */ 2:
          message.userId = reader.string();
          break;
        case /* bool has_right */ 3:
          message.hasRight = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetRightOfUserResponse_HasRight,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string right = 1; */
    if (message.right !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.right);
    /* string user_id = 2; */
    if (message.userId !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.userId);
    /* bool has_right = 3; */
    if (message.hasRight !== false)
      writer.tag(3, WireType.Varint).bool(message.hasRight);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.GetRightOfUserResponse.HasRight
 */
export const GetRightOfUserResponse_HasRight =
  new GetRightOfUserResponse_HasRight$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRightOfUserRequest$Type extends MessageType<CreateRightOfUserRequest> {
  constructor() {
    super('authentication.v1.CreateRightOfUserRequest', [
      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'right', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(
    value?: PartialMessage<CreateRightOfUserRequest>,
  ): CreateRightOfUserRequest {
    const message = { userId: '', right: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<CreateRightOfUserRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateRightOfUserRequest,
  ): CreateRightOfUserRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string user_id */ 1:
          message.userId = reader.string();
          break;
        case /* string right */ 2:
          message.right = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateRightOfUserRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string user_id = 1; */
    if (message.userId !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.userId);
    /* string right = 2; */
    if (message.right !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.right);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.CreateRightOfUserRequest
 */
export const CreateRightOfUserRequest = new CreateRightOfUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRightOfUserResponse$Type extends MessageType<CreateRightOfUserResponse> {
  constructor() {
    super('authentication.v1.CreateRightOfUserResponse', [
      { no: 1, name: 'ok', kind: 'message', oneof: 'response', T: () => Right },
      {
        no: 2,
        name: 'error',
        kind: 'message',
        oneof: 'response',
        T: () => BasicError,
      },
    ]);
  }
  create(
    value?: PartialMessage<CreateRightOfUserResponse>,
  ): CreateRightOfUserResponse {
    const message = { response: { oneofKind: undefined } };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<CreateRightOfUserResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateRightOfUserResponse,
  ): CreateRightOfUserResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* authentication.v1.Right ok */ 1:
          message.response = {
            oneofKind: 'ok',
            ok: Right.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.response as any).ok,
            ),
          };
          break;
        case /* errors.v1.BasicError error */ 2:
          message.response = {
            oneofKind: 'error',
            error: BasicError.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.response as any).error,
            ),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateRightOfUserResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* authentication.v1.Right ok = 1; */
    if (message.response.oneofKind === 'ok')
      Right.internalBinaryWrite(
        message.response.ok,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* errors.v1.BasicError error = 2; */
    if (message.response.oneofKind === 'error')
      BasicError.internalBinaryWrite(
        message.response.error,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.CreateRightOfUserResponse
 */
export const CreateRightOfUserResponse = new CreateRightOfUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRightOfUserRequest$Type extends MessageType<DeleteRightOfUserRequest> {
  constructor() {
    super('authentication.v1.DeleteRightOfUserRequest', [
      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'right', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(
    value?: PartialMessage<DeleteRightOfUserRequest>,
  ): DeleteRightOfUserRequest {
    const message = { userId: '', right: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<DeleteRightOfUserRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: DeleteRightOfUserRequest,
  ): DeleteRightOfUserRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string user_id */ 1:
          message.userId = reader.string();
          break;
        case /* string right */ 2:
          message.right = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: DeleteRightOfUserRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string user_id = 1; */
    if (message.userId !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.userId);
    /* string right = 2; */
    if (message.right !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.right);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.DeleteRightOfUserRequest
 */
export const DeleteRightOfUserRequest = new DeleteRightOfUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRightOfUserResponse$Type extends MessageType<DeleteRightOfUserResponse> {
  constructor() {
    super('authentication.v1.DeleteRightOfUserResponse', [
      { no: 1, name: 'ok', kind: 'message', oneof: 'response', T: () => Right },
      {
        no: 2,
        name: 'error',
        kind: 'message',
        oneof: 'response',
        T: () => BasicError,
      },
    ]);
  }
  create(
    value?: PartialMessage<DeleteRightOfUserResponse>,
  ): DeleteRightOfUserResponse {
    const message = { response: { oneofKind: undefined } };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<DeleteRightOfUserResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: DeleteRightOfUserResponse,
  ): DeleteRightOfUserResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* authentication.v1.Right ok */ 1:
          message.response = {
            oneofKind: 'ok',
            ok: Right.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.response as any).ok,
            ),
          };
          break;
        case /* errors.v1.BasicError error */ 2:
          message.response = {
            oneofKind: 'error',
            error: BasicError.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.response as any).error,
            ),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: DeleteRightOfUserResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* authentication.v1.Right ok = 1; */
    if (message.response.oneofKind === 'ok')
      Right.internalBinaryWrite(
        message.response.ok,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* errors.v1.BasicError error = 2; */
    if (message.response.oneofKind === 'error')
      BasicError.internalBinaryWrite(
        message.response.error,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.DeleteRightOfUserResponse
 */
export const DeleteRightOfUserResponse = new DeleteRightOfUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRightsOfUserRequest$Type extends MessageType<GetRightsOfUserRequest> {
  constructor() {
    super('authentication.v1.GetRightsOfUserRequest', [
      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(
    value?: PartialMessage<GetRightsOfUserRequest>,
  ): GetRightsOfUserRequest {
    const message = { userId: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetRightsOfUserRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetRightsOfUserRequest,
  ): GetRightsOfUserRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string user_id */ 1:
          message.userId = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetRightsOfUserRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string user_id = 1; */
    if (message.userId !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.userId);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.GetRightsOfUserRequest
 */
export const GetRightsOfUserRequest = new GetRightsOfUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRightsOfUserResponse$Type extends MessageType<GetRightsOfUserResponse> {
  constructor() {
    super('authentication.v1.GetRightsOfUserResponse', [
      {
        no: 1,
        name: 'ok',
        kind: 'message',
        oneof: 'response',
        T: () => Rights,
      },
      {
        no: 2,
        name: 'error',
        kind: 'message',
        oneof: 'response',
        T: () => BasicError,
      },
    ]);
  }
  create(
    value?: PartialMessage<GetRightsOfUserResponse>,
  ): GetRightsOfUserResponse {
    const message = { response: { oneofKind: undefined } };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetRightsOfUserResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetRightsOfUserResponse,
  ): GetRightsOfUserResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* authentication.v1.Rights ok */ 1:
          message.response = {
            oneofKind: 'ok',
            ok: Rights.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.response as any).ok,
            ),
          };
          break;
        case /* errors.v1.BasicError error */ 2:
          message.response = {
            oneofKind: 'error',
            error: BasicError.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.response as any).error,
            ),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetRightsOfUserResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* authentication.v1.Rights ok = 1; */
    if (message.response.oneofKind === 'ok')
      Rights.internalBinaryWrite(
        message.response.ok,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* errors.v1.BasicError error = 2; */
    if (message.response.oneofKind === 'error')
      BasicError.internalBinaryWrite(
        message.response.error,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message authentication.v1.GetRightsOfUserResponse
 */
export const GetRightsOfUserResponse = new GetRightsOfUserResponse$Type();
