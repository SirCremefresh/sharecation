// @generated by protobuf-ts 2.3.0
// @generated from protobuf file "pings/v1/pings.proto" (package "pings.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MESSAGE_TYPE } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
import { BasicError } from '../../errors/v1/errors';
/**
 * @generated from protobuf message pings.v1.Ping
 */
export interface Ping {
  /**
   * @generated from protobuf field: string ping_id = 1;
   */
  pingId: string;
  /**
   * @generated from protobuf field: string message = 2;
   */
  message: string;
}
/**
 * @generated from protobuf message pings.v1.GetPingRequest
 */
export interface GetPingRequest {
  /**
   * @generated from protobuf field: string ping_id = 1;
   */
  pingId: string;
}
/**
 * @generated from protobuf message pings.v1.GetPingResponse
 */
export interface GetPingResponse {
  /**
   * @generated from protobuf oneof: response
   */
  response:
    | {
        oneofKind: 'ok';
        /**
         * @generated from protobuf field: pings.v1.Ping ok = 1;
         */
        ok: Ping;
      }
    | {
        oneofKind: 'error';
        /**
         * @generated from protobuf field: errors.v1.BasicError error = 2;
         */
        error: BasicError;
      }
    | {
        oneofKind: undefined;
      };
}
// @generated message type with reflection information, may provide speed optimized methods
class Ping$Type extends MessageType<Ping> {
  constructor() {
    super('pings.v1.Ping', [
      { no: 1, name: 'ping_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'message', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<Ping>): Ping {
    const message = { pingId: '', message: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined) reflectionMergePartial<Ping>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Ping,
  ): Ping {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string ping_id */ 1:
          message.pingId = reader.string();
          break;
        case /* string message */ 2:
          message.message = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: Ping,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string ping_id = 1; */
    if (message.pingId !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.pingId);
    /* string message = 2; */
    if (message.message !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.message);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message pings.v1.Ping
 */
export const Ping = new Ping$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPingRequest$Type extends MessageType<GetPingRequest> {
  constructor() {
    super('pings.v1.GetPingRequest', [
      { no: 1, name: 'ping_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<GetPingRequest>): GetPingRequest {
    const message = { pingId: '' };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetPingRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetPingRequest,
  ): GetPingRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string ping_id */ 1:
          message.pingId = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetPingRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string ping_id = 1; */
    if (message.pingId !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.pingId);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message pings.v1.GetPingRequest
 */
export const GetPingRequest = new GetPingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPingResponse$Type extends MessageType<GetPingResponse> {
  constructor() {
    super('pings.v1.GetPingResponse', [
      { no: 1, name: 'ok', kind: 'message', oneof: 'response', T: () => Ping },
      {
        no: 2,
        name: 'error',
        kind: 'message',
        oneof: 'response',
        T: () => BasicError,
      },
    ]);
  }
  create(value?: PartialMessage<GetPingResponse>): GetPingResponse {
    const message = { response: { oneofKind: undefined } };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<GetPingResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetPingResponse,
  ): GetPingResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* pings.v1.Ping ok */ 1:
          message.response = {
            oneofKind: 'ok',
            ok: Ping.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.response as any).ok,
            ),
          };
          break;
        case /* errors.v1.BasicError error */ 2:
          message.response = {
            oneofKind: 'error',
            error: BasicError.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.response as any).error,
            ),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetPingResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* pings.v1.Ping ok = 1; */
    if (message.response.oneofKind === 'ok')
      Ping.internalBinaryWrite(
        message.response.ok,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* errors.v1.BasicError error = 2; */
    if (message.response.oneofKind === 'error')
      BasicError.internalBinaryWrite(
        message.response.error,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message pings.v1.GetPingResponse
 */
export const GetPingResponse = new GetPingResponse$Type();
